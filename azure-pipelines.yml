trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - "*"

variables:
  pythonVersion: '3.12'
  DOCKER_IMAGE_NAME: 'fastapi-demo'

stages:

# =========================
# Stage 1: Build + Test (CI)
# =========================
- stage: CI
  displayName: "Build, Lint, Test"
  jobs:
  - job: build_test
    displayName: "Python lint & tests with coverage"
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8
      displayName: "Install dependencies"

    - script: |
        flake8 .
      displayName: "Lint"

    - script: |
        pytest -q --disable-warnings --maxfail=1 --cov=app --cov-report=xml --junitxml=test-results.xml
      displayName: "Run tests with coverage"
      env:
        PYTHONPATH: $(System.DefaultWorkingDirectory)



    - task: PublishTestResults@2
      displayName: "Publish test results"
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: 'test-results.xml'
        failTaskOnFailedTests: true

    - task: PublishCodeCoverageResults@2
      displayName: "Publish coverage"
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'

# =========================
# Stage 2: Build Docker image (no push)
# =========================
- stage: Image
  displayName: "Build Docker image and publish as artifact"
  dependsOn: CI
  condition: succeeded()
  jobs:
  - job: docker_build
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - script: |
        IMAGE="$(DOCKER_IMAGE_NAME)"
        TAG="$(Build.BuildId)"
        echo "Building ${IMAGE}:${TAG}"
        docker build -t "${IMAGE}:${TAG}" .
      displayName: "docker build"

    - script: |
        mkdir -p "$(Build.ArtifactStagingDirectory)"
        docker save "$(DOCKER_IMAGE_NAME):$(Build.BuildId)" \
          -o "$(Build.ArtifactStagingDirectory)/$(DOCKER_IMAGE_NAME)_$(Build.BuildId).tar"
        echo "Saved image to $(Build.ArtifactStagingDirectory)/$(DOCKER_IMAGE_NAME)_$(Build.BuildId).tar"
      displayName: "Export image to tar"

    - task: PublishBuildArtifacts@1
      displayName: "Publish Docker image artifact"
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'docker-image'

    - task: PublishBuildArtifacts@1
      displayName: "Publish source snapshot"
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)'
        artifactName: 'source-snapshot'
